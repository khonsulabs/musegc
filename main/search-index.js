var searchIndex = new Map(JSON.parse('[\
["musegc",{"doc":"musegc","t":"KFKTFFFNNNNNNNNNNNNNNNNNNNNHNHNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNN","n":["Collectable","CollectionGuard","ContainsNoCollectables","MAY_CONTAIN_REFERENCES","Ref","Root","Tracer","acquire","as_root","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast_into","cast_into","cast_into","cast_into","clone","clone_into","collect","collect","collected","deref","downgrade","drop","drop","from","from","from","from","from_cast","from_cast","from_cast","from_cast","into","into","into","into","load","mark","new","new","to_owned","trace","trace","trace","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","while_unlocked","yield_to_collector"],"q":[[0,"musegc"],[68,"core::option"],[69,"intentional::cast"],[70,"core::ops::function"],[71,"core::result"],[72,"core::any"]],"d":["A type that can be garbage collected.","A guard that prevents garbage collection while held.","A type that can be garbage collected that cannot contain …","If true, this type may contain references and should have …","A reference to data stored in a garbage collector.","A root reference to a <code>T</code> that has been allocated in the …","A tracer for the garbage collector.","Acquires a lock that prevents the garbage collector from …","Loads a root reference to the underlying data. Returns <code>None</code>…","","","","","","","","","","","","","","","","","","","Invokes the garbage collector.","Manually invokes the garbage collector.","Executes <code>wrapped</code> with garbage collection available.","","Returns a “weak” reference to this root.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Loads a reference to the underlying data. Returns <code>None</code> if …","Marks <code>collectable</code> as being referenced, ensuring it is not …","Stores <code>value</code> in the garbage collector, returning a root …","Stores <code>value</code> in the garbage collector, returning a “weak…","","Traces all refrences that this value references.","","","","","","","","","","","","","","","Executes <code>unlocked</code> while this guard is temporarily released.","Yield to the garbage collector, if needed."],"i":[0,0,0,5,0,0,0,1,2,1,10,3,2,1,10,3,2,1,10,3,2,1,10,3,2,2,2,0,1,0,3,3,1,3,1,10,3,2,1,10,3,2,1,10,3,2,2,10,3,2,2,5,3,2,1,10,3,2,1,10,3,2,1,10,3,2,1,1],"f":"```````{{}b}{{{d{c}}b}{{h{{f{c}}}}}j}{ce{}{}}0000000{cg{}{}{{l{e}}}}0001111{{{d{c}}}{{d{c}}}{}}{{ce}n{}{}}{{}n}{bn}{ec{}{{Ab{}{{A`{c}}}}}}{{{f{c}}}ej{}}{{{f{c}}}{{d{c}}}j}3{{{f{c}}}nj}{cc{}}0000000::::{{{d{c}}b}{{h{c}}}j}{{Ad{d{c}}}nj}{{cb}{{f{c}}}j}{{cb}{{d{c}}}j}>{{jAd}n}{{{f{c}}Ad}nj}{{{d{c}}Ad}nj}{c{{Af{e}}}{}{}}0000000{cAh{}}000{{be}c{}{{Ab{}{{A`{c}}}}}}?","c":[],"p":[[5,"CollectionGuard",0],[5,"Ref",0],[5,"Root",0],[6,"Option",68],[10,"Collectable",0],[10,"CastFrom",69],[1,"unit"],[17,"Output"],[10,"FnOnce",70],[5,"Tracer",0],[6,"Result",71],[5,"TypeId",72]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
