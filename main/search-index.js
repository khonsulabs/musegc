var searchIndex = new Map(JSON.parse('[\
["benchmarks",{"t":"","n":[],"q":[],"i":[],"f":"","D":"`","p":[],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAAAEAAAAAAA"}],\
["refuse",{"t":"FFKFKFTKYKFFKRKYFFFFNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNMNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["AnyRef","AnyRoot","Collectable","CollectionGuard","ContainsNoRefs","LocalPool","MAY_CONTAIN_REFERENCES","MapAs","MapAs","NoMapping","Ref","Root","SimpleType","Target","Trace","Trace","Tracer","WouldDeadlock","YieldComplete","Yielder","acquire","allocating_in","architecture","as_any","as_any","as_mut","as_ref","as_ref","as_ref","as_root","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast_into","cast_into","cast_into","cast_into","cast_into","cast_into","cast_into","cast_into","cast_into","cast_into","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","cmp","cmp","cmp","cmp","collect","collect","compare","compare","compare","compare","coordinated_yield","default","deref","downcast_checked","downcast_ref","downcast_root","downgrade","downgrade_any","drop","drop","drop","drop","enter","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into_any_root","load","load","load","load_mapped","map_as","mark","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","ptr_eq","root_count","to_any_root","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","trace","trace","trace","trace","try_acquire","try_collect","try_collect","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_any","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_while_unlocked","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upgrade","wait","while_unlocked","yield_to_collector"],"q":[[0,"refuse"],[233,"core::option"],[234,"intentional::cast"],[235,"core::cmp"],[236,"core::ops::function"],[237,"core::fmt"],[238,"core::hash"],[239,"core::marker"],[240,"core::convert"],[241,"alloc::string"],[242,"core::result"],[243,"core::any"],[244,"refuse_macros"]],"i":[0,0,0,0,0,0,36,0,0,0,0,0,0,29,0,0,0,0,0,0,1,1,0,4,7,1,1,9,4,4,3,1,16,18,30,9,4,12,7,5,3,1,16,18,30,9,4,12,7,5,3,1,16,18,30,9,4,12,7,5,3,1,16,18,30,9,4,12,7,5,9,4,12,7,5,9,4,12,7,5,9,4,4,12,12,7,5,5,9,4,7,5,0,1,9,4,7,5,1,3,9,5,5,5,9,9,3,1,9,7,3,9,9,9,9,9,4,4,4,4,4,12,7,5,9,4,12,12,5,3,1,16,18,30,9,4,12,7,7,5,5,5,5,5,3,1,16,18,30,9,4,12,7,5,9,4,7,5,3,1,16,18,30,9,4,12,7,5,9,4,7,5,5,29,30,9,4,9,4,7,5,9,9,9,9,4,12,7,5,12,36,9,4,5,1,0,1,3,1,16,18,30,9,4,12,7,5,9,3,1,16,18,30,9,4,12,7,5,1,3,1,16,18,30,9,4,12,7,5,5,16,1,1],"f":"````````````````````{{}b}{{{d{b}}{d{f}}}b}`{{{h{c}}}jl}{{{d{n}}}j}{{{d{A`b}}}{{d{A`b}}}}{{{d{b}}}{{d{b}}}}{{{d{{Ab{c}}}}}{{d{{h{c}}}}}l}{{{d{{h{c}}}}}{{d{{h{c}}}}}{}}{{{d{{h{c}}}}{d{b}}}{{Ad{{Ab{c}}}}}l}{{{d{c}}}{{d{e}}}{}{}}000000000{{{d{A`c}}}{{d{A`e}}}{}{}}000000000{cg{}{}{{Af{e}}}}000000000{ce{}{}}000000000{{{d{{Ab{c}}}}}{{Ab{c}}}l}{{{d{{h{c}}}}}{{h{c}}}{}}{{{d{Ah}}}Ah}{{{d{n}}}n}{{{d{j}}}j}{{{d{c}}{d{A`e}}}Aj{}{}}0000{{{d{c}}}Aj{}}0000000{{{d{{Ab{c}}}}{d{{Ab{c}}}}}Al{lAn}}{{{d{{h{c}}}}{d{{h{c}}}}}Al{}}{{{d{n}}{d{n}}}Al}{{{d{j}}{d{j}}}Al}{{}Aj}{{{d{A`b}}}Aj}{{{d{c}}{d{e}}}Al{}{}}000{{{d{A`b}}c}Aj{{Bf{B`}{{Bb{Bd}}}}}}{{}f}{{{d{{Ab{c}}}}}{{d{e}}}l{}}{{{d{j}}}{{Ad{{h{c}}}}}l}{{{d{j}}}{{h{c}}}l}{{{d{j}}{d{b}}}{{Ad{{Ab{c}}}}}l}{{{d{{Ab{c}}}}}{{h{c}}}l}{{{d{{Ab{c}}}}}jl}{{{d{A`f}}}Aj}:{{{d{A`{Ab{c}}}}}Ajl}{{{d{A`n}}}Aj}{{{d{f}}}b}{{{d{{Ab{c}}}}{d{{h{c}}}}}Bhl}{{{d{{Ab{c}}}}{d{{d{{h{c}}}}}}}Bhl}{{{d{{Ab{c}}}}{d{{Ab{c}}}}}Bh{lBj}}{{{d{{Ab{c}}}}{d{j}}}Bhl}{{{d{{Ab{c}}}}{d{{d{j}}}}}Bhl}{{{d{{h{c}}}}{d{{d{j}}}}}Bhl}{{{d{{h{c}}}}{d{{h{c}}}}}Bh{}}{{{d{{h{c}}}}{d{{Ab{c}}}}}Bhl}{{{d{{h{c}}}}{d{{d{{Ab{c}}}}}}}Bhl}{{{d{{h{c}}}}{d{j}}}Bhl}{{{d{Ah}}{d{Ah}}}Bh}{{{d{n}}{d{n}}}Bh}{{{d{j}}{d{j}}}Bh}{{{d{{Ab{c}}}}{d{A`Bl}}}Bn{lC`}}{{{d{{h{c}}}}{d{A`Bl}}}Bn{lC`}}{{{d{Ah}}{d{A`Bl}}}Bn}0{{{d{j}}{d{A`Bl}}}Bn}{cc{}}0000000{{{Ab{c}}}nl}1{{{d{j}}}j}{{{d{{h{c}}}}}jl}{{{h{c}}}jl}{{{d{{Ab{c}}}}}jl}55555555555{{{d{{Ab{c}}}}{d{A`e}}}Aj{lCb}Cd}{{{d{{h{c}}}}{d{A`e}}}Aj{}Cd}{{{d{n}}{d{A`c}}}AjCd}{{{d{j}}{d{A`c}}}AjCd}{ce{}{}}0000000009{{{d{{h{c}}}}{d{b}}}{{Ad{{d{c}}}}}l}{{{d{n}}}{{Ad{{d{c}}}}}l}{{{d{j}}{d{b}}}{{Ad{{d{c}}}}}l}{{{d{j}}{d{b}}}{{Ad{{d{c}}}}}Cf}{{{d{{Cj{}{{Ch{c}}}}}}}{{d{c}}}Cf}{{{d{A`Cl}}c}Aj{{Cn{j}}}}{{ce}{{Ab{c}}}l{{D`{b}}}}{{ce}{{h{c}}}l{{D`{b}}}}{{{d{{Ab{c}}}}{d{{Ab{c}}}}}{{Ad{Al}}}{lDb}}{{{d{{h{c}}}}{d{{h{c}}}}}{{Ad{Al}}}{}}{{{d{n}}{d{n}}}{{Ad{Al}}}}{{{d{j}}{d{j}}}{{Ad{Al}}}}{{{d{{Ab{c}}}}{d{{Ab{c}}}}}Bhl}{{{d{{Ab{c}}}}}Ddl}{{{d{{Ab{c}}}}}nl}{{{d{c}}}e{}{}}0000{{{d{c}}}Df{}}{{{d{Dh}}{d{A`Cl}}}Aj}{{{d{{Ab{c}}}}{d{A`Cl}}}Ajl}{{{d{{h{c}}}}{d{A`Cl}}}Ajl}{{{d{j}}{d{A`Cl}}}Aj}{{}{{Ad{b}}}}{{}{{Dj{AjAh}}}}{{{d{A`b}}}{{Dj{AjAh}}}}{c{{Dj{e}}}{}{}}000000000{{nc}{{Dj{{Ab{e}}n}}}{{D`{b}}}l}1111111111{{{d{A`b}}e}{{Dj{cAh}}}{}{{Bf{}{{Bb{c}}}}}}{{{d{c}}}Dl{}}000000000{{{d{j}}{d{b}}}{{Ad{n}}}}{B`Bd}{{{d{A`b}}e}c{}{{Bf{}{{Bb{c}}}}}}{{{d{A`b}}}Aj}","D":"Ih","p":[[5,"CollectionGuard",0],[1,"reference"],[5,"LocalPool",0],[5,"Ref",0],[5,"AnyRef",0],[10,"Collectable",0],[5,"AnyRoot",0],[0,"mut"],[5,"Root",0],[6,"Option",233],[10,"CastFrom",234],[5,"WouldDeadlock",0],[1,"unit"],[6,"Ordering",235],[10,"Ord",235],[5,"Yielder",0],[17,"Output"],[5,"YieldComplete",0],[10,"FnOnce",236],[1,"bool"],[10,"PartialEq",235],[5,"Formatter",237],[8,"Result",237],[10,"Debug",237],[10,"Hash",238],[10,"Hasher",238],[10,"Sized",239],[17,"Target"],[10,"MapAs",0],[5,"Tracer",0],[10,"Into",240],[10,"AsRef",240],[10,"PartialOrd",235],[1,"u64"],[5,"String",241],[10,"Trace",0],[6,"Result",242],[5,"TypeId",243]],"r":[[8,244],[15,244]],"b":[[111,"impl-PartialEq%3CRef%3CT%3E%3E-for-Root%3CT%3E"],[112,"impl-PartialEq%3C%26Ref%3CT%3E%3E-for-Root%3CT%3E"],[113,"impl-PartialEq-for-Root%3CT%3E"],[114,"impl-PartialEq%3CAnyRef%3E-for-Root%3CT%3E"],[115,"impl-PartialEq%3C%26AnyRef%3E-for-Root%3CT%3E"],[116,"impl-PartialEq%3C%26AnyRef%3E-for-Ref%3CT%3E"],[117,"impl-PartialEq-for-Ref%3CT%3E"],[118,"impl-PartialEq%3CRoot%3CT%3E%3E-for-Ref%3CT%3E"],[119,"impl-PartialEq%3C%26Root%3CT%3E%3E-for-Ref%3CT%3E"],[120,"impl-PartialEq%3CAnyRef%3E-for-Ref%3CT%3E"],[126,"impl-Display-for-WouldDeadlock"],[127,"impl-Debug-for-WouldDeadlock"],[139,"impl-From%3C%26AnyRef%3E-for-AnyRef"],[140,"impl-From%3C%26Ref%3CT%3E%3E-for-AnyRef"],[141,"impl-From%3CRef%3CT%3E%3E-for-AnyRef"],[142,"impl-From%3C%26Root%3CT%3E%3E-for-AnyRef"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAJ0AEQAJAAAAEAAAABoAAwAfAD0AXwADAGQAAQBrAAMAcAARAIoAAACMAAMAkQANALIAAwC5AAUAwAACAMYACQDRAAkA3AAJAA=="}],\
["refuse_macros",{"t":"YY","n":["MapAs","Trace"],"q":[[0,"refuse_macros"]],"i":[0,0],"f":"``","D":"b","p":[],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAEAAgA="}],\
["refuse_pool",{"t":"FFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["RefString","RootString","as_any","as_root","borrow","borrow","borrow_mut","borrow_mut","cast","cast","cast_into","cast_into","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","cmp","cmp","compare","compare","deref","downgrade","downgrade_any","drop","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_any","from_cast","from_cast","hash","hash","into","into","load","new","new","partial_cmp","partial_cmp","root_count","to_owned","to_owned","to_string","trace","trace","try_from","try_from","try_from_any","try_into","try_into","type_id","type_id"],"q":[[0,"refuse_pool"],[75,"refuse"],[76,"core::option"],[77,"intentional::cast"],[78,"core::cmp"],[79,"alloc::string"],[80,"core::fmt"],[81,"core::hash"],[82,"alloc::borrow"],[83,"core::convert"],[84,"core::result"],[85,"core::any"]],"i":[0,0,1,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,1,5,1,5,1,5,5,5,5,5,5,5,5,5,5,1,1,5,5,1,1,5,5,1,5,5,5,5,1,1,1,1,1,5,1,5,1,5,1,1,5,1,5,1,5,5,1,5,5,1,5,1,5,5,1,5,1],"f":"``{{{d{b}}}f}{{{d{b}}{d{h}}}{{l{j}}}}{{{d{c}}}{{d{e}}}{}{}}0{{{d{nc}}}{{d{ne}}}{}{}}0{cg{}{}{{A`{e}}}}0{ce{}{}}0{{{d{j}}}j}{{{d{b}}}b}{{{d{c}}{d{ne}}}Ab{}{}}0{{{d{c}}}Ab{}}00{{{d{j}}{d{j}}}Ad}{{{d{b}}{d{b}}}Ad}{{{d{c}}{d{e}}}Ad{}{}}0{{{d{j}}}{{d{c}}}{}}{{{d{j}}}b}{{{d{j}}}f}{{{d{nj}}}Ab}{{{d{j}}{d{j}}}Af}{{{d{j}}{d{Ah}}}Af}{{{d{j}}{d{Aj}}}Af}{{{d{j}}{d{b}}}Af}{{{d{j}}{d{{d{Aj}}}}}Af}{{{d{j}}{d{{d{Ah}}}}}Af}{{{d{b}}{d{b}}}Af}{{{d{b}}{d{j}}}Af}{{{d{c}}{d{e}}}Af{}{}}000{{{d{j}}{d{nAl}}}An}0{{{d{b}}{d{nAl}}}An}{{{d{Aj}}}j}{cc{}}{Ajj}{{{d{Ah}}}j}2{{{d{Ah}}}b}{{{d{Aj}}}b}{Ajb}{f{{l{b}}}}66{{{d{j}}{d{nc}}}AbB`}{{{d{b}}{d{nc}}}AbB`}{ce{}{}}0{{{d{b}}{d{h}}}{{l{{d{Ah}}}}}}{{ce}j{{Bd{{Bb{Ah}}}}}{{Bf{h}}}}{cb{{Bd{{Bb{Ah}}}}}}{{{d{j}}{d{j}}}{{l{Ad}}}}{{{d{b}}{d{b}}}{{l{Ad}}}}{{{d{j}}}Bh}{{{d{c}}}e{}{}}0{{{d{c}}}Aj{}}{{{d{j}}{d{nBj}}}Ab}{{{d{b}}{d{nBj}}}Ab}{c{{Bl{e}}}{}{}}0{{Bnc}{{Bl{jBn}}}{{Bf{h}}}}11{{{d{c}}}C`{}}0","D":"Bb","p":[[5,"RefString",0],[1,"reference"],[5,"AnyRef",75],[5,"CollectionGuard",75],[5,"RootString",0],[6,"Option",76],[0,"mut"],[10,"CastFrom",77],[1,"unit"],[6,"Ordering",78],[1,"bool"],[1,"str"],[5,"String",79],[5,"Formatter",80],[8,"Result",80],[10,"Hasher",81],[6,"Cow",82],[10,"Into",83],[10,"AsRef",83],[1,"u64"],[5,"Tracer",75],[6,"Result",84],[5,"AnyRoot",75],[5,"TypeId",85]],"r":[],"b":[[27,"impl-PartialEq-for-RootString"],[28,"impl-PartialEq%3Cstr%3E-for-RootString"],[29,"impl-PartialEq%3CString%3E-for-RootString"],[30,"impl-PartialEq%3CRefString%3E-for-RootString"],[31,"impl-PartialEq%3C%26String%3E-for-RootString"],[32,"impl-PartialEq%3C%26str%3E-for-RootString"],[33,"impl-PartialEq-for-RefString"],[34,"impl-PartialEq%3CRootString%3E-for-RefString"],[39,"impl-Debug-for-RootString"],[40,"impl-Display-for-RootString"],[42,"impl-From%3C%26String%3E-for-RootString"],[44,"impl-From%3CString%3E-for-RootString"],[45,"impl-From%3C%26str%3E-for-RootString"],[47,"impl-From%3C%26str%3E-for-RefString"],[48,"impl-From%3C%26String%3E-for-RefString"],[49,"impl-From%3CString%3E-for-RefString"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAADoACAAFABMAGwAQAC0AAQAwAAIANAADAD0AAQBAAAYASAADAA=="}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
