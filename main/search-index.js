var searchIndex = new Map(JSON.parse('[\
["refuse",{"doc":"Refuse","t":"FKFKFTKYKFFKRKYFNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNHXNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNN","n":["AnyRef","Collectable","CollectionGuard","ContainsNoRefs","LocalPool","MAY_CONTAIN_REFERENCES","MapAs","MapAs","NoMapping","Ref","Root","SimpleType","Target","Trace","Trace","Tracer","acquire","allocating_in","architecture","as_any","as_any","as_mut","as_ref","as_ref","as_ref","as_root","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast_into","cast_into","cast_into","cast_into","cast_into","cast_into","clone","clone","clone","clone_into","clone_into","clone_into","cmp","collect","collect","collected","collected","compare","default","deref","downcast_ref","downcast_root","downgrade","downgrade_any","drop","drop","drop","enter","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","from","from","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","hash","hash","hash","into","into","into","into","into","into","load","load","load_mapped","map_as","mark","new","new","partial_cmp","ptr_eq","root_count","to_owned","to_owned","to_owned","trace","trace","trace","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","while_unlocked","yield_to_collector"],"q":[[0,"refuse"],[145,"core::option"],[146,"intentional::cast"],[147,"core::cmp"],[148,"core::cmp"],[149,"core::cmp"],[150,"core::hash"],[151,"core::convert"],[152,"core::convert"],[153,"core::any"]],"d":["A type-erased garbage collected reference.","A type that can be garbage collected.","A guard that prevents garbage collection while held.","A type that can be garbage collected that cannot contain …","A pool of garbage collected values.","If true, this type may contain references and should have …","A mapping from one type to another.","","A type that implements <code>MapAs</code> with an empty implementation.","A reference to data stored in a garbage collector.","A root reference to a <code>T</code> that has been allocated in the …","A type that can contain no <code>Ref&lt;T&gt;</code>s and has an empty <code>MapAs</code> …","The target type of the mapping.","A type that can find and mark any references it has.","","A tracer for the garbage collector.","Acquires a lock that prevents the garbage collector from …","Returns a guard that allocates from <code>pool</code>.","Architecture overview of the underlying design of Refuse.","Returns this reference as an untyped reference.","Returns this reference as an untyped reference.","","","","","Loads a root reference to the underlying data. Returns <code>None</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Invokes the garbage collector.","Manually invokes the garbage collector.","Executes <code>wrapped</code> with garbage collection available.","","","","","Returns a <code>Ref&lt;T&gt;</code> if the underlying reference points to a <code>T</code>.","Returns a <code>Root&lt;T&gt;</code> if the underlying reference points to a <code>T</code>…","Returns a “weak” reference to this root.","Returns an untyped “weak” reference erased to this …","","","","Acquires a collection guard for this pool.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Loads a reference to the underlying data. Returns <code>None</code> if …","Loads a reference to the underlying data. Returns <code>None</code> if …","Returns a reference to the result of <code>MapAs::map_as()</code>, if …","Maps <code>self</code> to target type.","Marks <code>collectable</code> as being referenced, ensuring it is not …","Stores <code>value</code> in the garbage collector, returning a root …","Stores <code>value</code> in the garbage collector, returning a “weak…","","Returns true if these two references point to the same …","Returns the current number of root references to this …","","","","Traces all refrences that this value references.","","","","","","","","","","","","","","","","","","","","","","Executes <code>unlocked</code> while this guard is temporarily released.","Yield to the garbage collector, if needed."],"i":[0,0,0,0,0,26,0,0,0,0,0,0,20,0,0,0,1,1,0,3,6,1,1,3,6,6,2,1,21,3,6,4,2,1,21,3,6,4,2,1,21,3,6,4,2,1,21,3,6,4,3,6,4,3,6,4,3,0,1,0,0,3,2,3,4,4,3,3,2,1,3,2,3,3,3,3,3,6,6,6,6,6,4,2,1,21,3,6,4,4,4,4,4,2,1,21,3,6,4,3,6,4,2,1,21,3,6,4,6,4,4,20,21,3,6,3,3,3,3,6,4,26,3,6,4,2,1,21,3,6,4,2,1,21,3,6,4,2,1,21,3,6,4,1,1],"f":"````````````````{{}b}{{bd}b}`{{{f{c}}}hj}{{{l{c}}}hj}{bb}0{{{f{c}}}{{l{c}}}j}{{{l{c}}}{{l{c}}}{}}{{{l{c}}b}{{n{{f{c}}}}}j}{ce{}{}}00000000000{cg{}{}{{A`{e}}}}00000111111{{{f{c}}}{{f{c}}}j}4{hh}{{ce}Ab{}{}}00{{{f{c}}{f{c}}}Ad{jAf}}{{}Ab}{bAb}{ec{}{{Aj{}{{Ah{c}}}}}}`{{ce}Ad{}{}}{{}d}{{{f{c}}}ej{}}{h{{n{{l{c}}}}}j}{{hb}{{n{{f{c}}}}}j}{{{f{c}}}{{l{c}}}j}{{{f{c}}}hj}{dAb}9{{{f{c}}}Abj}{db}{{{f{c}}h}Alj}{{{f{c}}{l{c}}}Alj}0{{{f{c}}{f{c}}}Al{jAn}}2{{{l{c}}{f{c}}}Alj}0{{{l{c}}{l{c}}}Al{}}{{{l{c}}h}Alj}0{{hh}Al}{cc{}}0000{{{l{c}}}hj}<{hh}12222222{{{f{c}}e}Ab{jB`}Bb}{{{l{c}}e}Ab{}Bb}{{hc}AbBb}{ce{}{}}00000{{{l{c}}b}{{n{c}}}j}{{hb}{{n{c}}}j}{{hb}{{n{c}}}Bd}{{{Bh{}{{Bf{c}}}}}cBd}{{Bjc}Ab{{Bl{h}}}}{{ce}{{f{c}}}j{{Bn{b}}}}{{ce}{{l{c}}}j{{Bn{b}}}}{{{f{c}}{f{c}}}{{n{Ad}}}{jC`}}{{{f{c}}{f{c}}}Alj}{{{f{c}}}Cbj}:::{{CdBj}Ab}{{{f{c}}Bj}Abj}{{{l{c}}Bj}Abj}{{hBj}Ab}{c{{Cf{e}}}{}{}}00000000000{cCh{}}00000{{be}c{}{{Aj{}{{Ah{c}}}}}}{bAb}","c":[],"p":[[5,"CollectionGuard",0],[5,"LocalPool",0],[5,"Root",0],[5,"AnyRef",0],[10,"Collectable",0],[5,"Ref",0],[6,"Option",145],[10,"CastFrom",146],[1,"unit"],[6,"Ordering",147],[10,"Ord",147],[17,"Output"],[10,"FnOnce",148],[1,"bool"],[10,"PartialEq",147],[10,"Hash",149],[10,"Hasher",149],[10,"Sized",150],[17,"Target"],[10,"MapAs",0],[5,"Tracer",0],[10,"Into",151],[10,"AsRef",151],[10,"PartialOrd",147],[1,"u64"],[10,"Trace",0],[6,"Result",152],[5,"TypeId",153]],"b":[[72,"impl-PartialEq%3C%26AnyRef%3E-for-Root%3CT%3E"],[73,"impl-PartialEq%3C%26Ref%3CT%3E%3E-for-Root%3CT%3E"],[74,"impl-PartialEq%3CRef%3CT%3E%3E-for-Root%3CT%3E"],[75,"impl-PartialEq-for-Root%3CT%3E"],[76,"impl-PartialEq%3CAnyRef%3E-for-Root%3CT%3E"],[77,"impl-PartialEq%3C%26Root%3CT%3E%3E-for-Ref%3CT%3E"],[78,"impl-PartialEq%3CRoot%3CT%3E%3E-for-Ref%3CT%3E"],[79,"impl-PartialEq-for-Ref%3CT%3E"],[80,"impl-PartialEq%3C%26AnyRef%3E-for-Ref%3CT%3E"],[81,"impl-PartialEq%3CAnyRef%3E-for-Ref%3CT%3E"],[88,"impl-From%3C%26Ref%3CT%3E%3E-for-AnyRef"],[89,"impl-From%3C%26Root%3CT%3E%3E-for-AnyRef"],[90,"impl-From%3C%26AnyRef%3E-for-AnyRef"],[91,"impl-From%3CRef%3CT%3E%3E-for-AnyRef"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
